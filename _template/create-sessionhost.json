{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.14.6.61914",
      "templateHash": "7380616299661293189"
    }
  },
  "parameters": {
    "randomHash": {
      "type": "string",
      "defaultValue": "[newGuid()]"
    },
    "resourceGroupName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The resource group the VM will be located in."
      }
    },
    "avdHostType": {
      "type": "string",
      "defaultValue": "Desktop",
      "allowedValues": [
        "Desktop",
        "RemoteApp"
      ]
    },
    "deploymentScriptIdentityResourceGroupName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The resource group that the managed identity, for deployment scripts, is located in."
      }
    },
    "deploymentScriptIdentityName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the managed identity for running deployment scripts."
      }
    },
    "vmNamePrefix": {
      "type": "string",
      "maxLength": 9,
      "minLength": 1,
      "metadata": {
        "description": "The prefix to use when naming the VM."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D8s_v4",
      "minLength": 1,
      "metadata": {
        "description": "The VM size to use."
      }
    },
    "vmDiskSize": {
      "type": "int",
      "defaultValue": 256,
      "metadata": {
        "description": "The size (In GB) of the OS disk for the VM."
      }
    },
    "vnetResourceGroupName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The resource group that the Virtual Network is located in."
      }
    },
    "vnetName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the Virtual Network."
      }
    },
    "vnetSubnetName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the subnet to use in the Virtual Network."
      }
    },
    "monitoringWorkspaceSubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "minLength": 1,
      "metadata": {
        "description": "The subscription ID that the log analytics workspace in located in."
      }
    },
    "monitoringWorkspaceResourceGroupName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The resource group that the log analytics workspace is located in."
      }
    },
    "monitoringWorkspaceName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the log analytics workspace."
      }
    },
    "imageGalleryResourceGroupName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The resource group the image gallery is located in."
      }
    },
    "imageGalleryName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the image gallery."
      }
    },
    "imageName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the image to use."
      }
    },
    "imageVersion": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The version of the image to use."
      }
    },
    "keyVaultResourceGroupName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the resource group the key vault is located in."
      }
    },
    "keyVaultName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the key vault."
      }
    },
    "vmJoinerUserName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The username of the user to use to join the session host to AD."
      }
    },
    "vmJoinerKeyVaultPasswordItemName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the secret item for the VM joiner' password."
      }
    },
    "localAdminUserName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The username to use for the local admin."
      }
    },
    "localAdminKeyVaultPasswordItemName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the secret item to use for the local admin's password."
      }
    },
    "domainName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The AD domain name the VM will be joining to."
      }
    },
    "domainDesktopOUPath": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The OU path in AD to join the VM to for 'Session Desktop' hosts."
      }
    },
    "domainRemoteAppOUPath": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The OU path in AD to join the VM to for 'RemoteApp' hosts."
      }
    },
    "hostPoolBaseName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the hostpool the session host will be apart of."
      }
    }
  },
  "variables": {
    "randomString": "[take(uniqueString(subscription().id, parameters('randomHash')), 6)]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploySessionHost_{0}', variables('randomString'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vmLocation": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName')), '2022-09-01', 'full').location]"
          },
          "avdHostType": {
            "value": "[parameters('avdHostType')]"
          },
          "deploymentScriptIdentityResourceGroupName": {
            "value": "[parameters('deploymentScriptIdentityResourceGroupName')]"
          },
          "deploymentScriptIdentityName": {
            "value": "[parameters('deploymentScriptIdentityName')]"
          },
          "vmNamePrefix": {
            "value": "[parameters('vmNamePrefix')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "vmDiskSize": {
            "value": "[parameters('vmDiskSize')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetSubnetName": {
            "value": "[parameters('vnetSubnetName')]"
          },
          "monitoringWorkspaceSubscriptionId": {
            "value": "[parameters('monitoringWorkspaceSubscriptionId')]"
          },
          "monitoringWorkspaceResourceGroupName": {
            "value": "[parameters('monitoringWorkspaceResourceGroupName')]"
          },
          "monitoringWorkspaceName": {
            "value": "[parameters('monitoringWorkspaceName')]"
          },
          "imageGalleryResourceGroupName": {
            "value": "[parameters('imageGalleryResourceGroupName')]"
          },
          "imageGalleryName": {
            "value": "[parameters('imageGalleryName')]"
          },
          "imageName": {
            "value": "[parameters('imageName')]"
          },
          "imageVersion": {
            "value": "[parameters('imageVersion')]"
          },
          "keyVaultResourceGroupName": {
            "value": "[parameters('keyVaultResourceGroupName')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "vmJoinerUserName": {
            "value": "[parameters('vmJoinerUserName')]"
          },
          "vmJoinerKeyVaultPasswordItemName": {
            "value": "[parameters('vmJoinerKeyVaultPasswordItemName')]"
          },
          "localAdminUserName": {
            "value": "[parameters('localAdminUserName')]"
          },
          "localAdminKeyVaultPasswordItemName": {
            "value": "[parameters('localAdminKeyVaultPasswordItemName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "domainOUPath": "[if(equals(parameters('avdHostType'), 'Desktop'), createObject('value', parameters('domainDesktopOUPath')), createObject('value', parameters('domainRemoteAppOUPath')))]",
          "hostPoolName": "[if(equals(parameters('avdHostType'), 'Desktop'), createObject('value', format('{0} - Desktop', parameters('hostPoolBaseName'))), createObject('value', format('{0} - RemoteApps', parameters('hostPoolBaseName'))))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.6.61914",
              "templateHash": "9630055512541358170"
            }
          },
          "parameters": {
            "vmLocation": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The datacenter location the resources will reside."
              },
              "minLength": 1
            },
            "randomHashString": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "A string to use as a hash for generating a unique string."
              },
              "minLength": 1
            },
            "avdHostType": {
              "type": "string",
              "defaultValue": "Desktop",
              "allowedValues": [
                "Desktop",
                "RemoteApp"
              ]
            },
            "deploymentScriptIdentityResourceGroupName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The resource group that the managed identity, for deployment scripts, is located in."
              }
            },
            "deploymentScriptIdentityName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the managed identity for running deployment scripts."
              }
            },
            "vmNamePrefix": {
              "type": "string",
              "maxLength": 9,
              "minLength": 1,
              "metadata": {
                "description": "The prefix to use when naming the VM."
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D8s_v4",
              "minLength": 1,
              "metadata": {
                "description": "The VM size to use."
              }
            },
            "vmDiskSize": {
              "type": "int",
              "defaultValue": 256,
              "metadata": {
                "description": "The size (In GB) of the OS disk for the VM."
              }
            },
            "vnetResourceGroupName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The resource group that the Virtual Network is located in."
              }
            },
            "vnetName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the Virtual Network."
              }
            },
            "vnetSubnetName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the subnet to use in the Virtual Network."
              }
            },
            "monitoringWorkspaceSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "minLength": 1,
              "metadata": {
                "description": "The subscription ID that the log analytics workspace in located in."
              }
            },
            "monitoringWorkspaceResourceGroupName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The resource group that the log analytics workspace is located in."
              }
            },
            "monitoringWorkspaceName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the log analytics workspace."
              }
            },
            "imageGalleryResourceGroupName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The resource group the image gallery is located in."
              }
            },
            "imageGalleryName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the image gallery."
              }
            },
            "imageName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the image to use."
              }
            },
            "imageVersion": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The version of the image to use."
              }
            },
            "keyVaultResourceGroupName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the resource group the key vault is located in."
              }
            },
            "keyVaultName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the key vault."
              }
            },
            "vmJoinerUserName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The username of the user to use to join the session host to AD."
              }
            },
            "vmJoinerKeyVaultPasswordItemName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the secret item for the VM joiner' password."
              }
            },
            "localAdminUserName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The username to use for the local admin."
              }
            },
            "localAdminKeyVaultPasswordItemName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the secret item to use for the local admin's password."
              }
            },
            "domainName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The AD domain name the VM will be joining to."
              }
            },
            "domainOUPath": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The OU path in AD to join the VM to."
              }
            },
            "hostPoolName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the hostpool the session host will be apart of."
              }
            }
          },
          "variables": {
            "randomStrLength": "[int(sub(14, length(parameters('vmNamePrefix'))))]",
            "vmName": "[format('{0}-{1}', parameters('vmNamePrefix'), take(uniqueString(subscription().id, resourceGroup().id, parameters('randomHashString')), variables('randomStrLength')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deployAVDHost_{0}', variables('vmName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vmName": {
                    "value": "[variables('vmName')]"
                  },
                  "vmLocation": {
                    "value": "[parameters('vmLocation')]"
                  },
                  "vmSize": {
                    "value": "[parameters('vmSize')]"
                  },
                  "imageGalleryResourceGroupName": {
                    "value": "[parameters('imageGalleryResourceGroupName')]"
                  },
                  "imageGalleryName": {
                    "value": "[parameters('imageGalleryName')]"
                  },
                  "imageName": {
                    "value": "[parameters('imageName')]"
                  },
                  "imageVersion": {
                    "value": "[parameters('imageVersion')]"
                  },
                  "vmInstallGPUDriver": {
                    "value": false
                  },
                  "vmTrustedLaunch": {
                    "value": false
                  },
                  "vmDomainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "vmDomainOUPath": {
                    "value": "[parameters('domainOUPath')]"
                  },
                  "vmDiskSizeGB": {
                    "value": "[parameters('vmDiskSize')]"
                  },
                  "vmAdminUserName": {
                    "value": "[parameters('localAdminUserName')]"
                  },
                  "vmAdminPwd": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('localAdminKeyVaultPasswordItemName')]"
                    }
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "vnetResourceGroupName": {
                    "value": "[parameters('vnetResourceGroupName')]"
                  },
                  "vnetSubnetName": {
                    "value": "[parameters('vnetSubnetName')]"
                  },
                  "vmJoinerUserName": {
                    "value": "[parameters('vmJoinerUserName')]"
                  },
                  "vmJoinerPwd": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      },
                      "secretName": "[parameters('vmJoinerKeyVaultPasswordItemName')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.14.6.61914",
                      "templateHash": "4448048975840134339"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name for the VM."
                      }
                    },
                    "vmLocation": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "minLength": 1,
                      "metadata": {
                        "description": "The datacenter location the resources will reside."
                      }
                    },
                    "vmSize": {
                      "type": "string",
                      "defaultValue": "Standard_D8s_v4",
                      "minLength": 1,
                      "metadata": {
                        "description": "The VM size to use."
                      }
                    },
                    "vmDiskSizeGB": {
                      "type": "int",
                      "defaultValue": 256,
                      "metadata": {
                        "description": "The size (In GB) of the OS disk for the VM."
                      }
                    },
                    "vmTrustedLaunch": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Whether to enable 'Trusted Launch' for the VM."
                      }
                    },
                    "vmInstallGPUDriver": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Whether to install GPU drivers for the VM."
                      }
                    },
                    "imageGalleryResourceGroupName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The resource group the image gallery is located in."
                      }
                    },
                    "imageGalleryName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name of the image gallery."
                      }
                    },
                    "imageName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name of the image to use."
                      }
                    },
                    "imageVersion": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The version of the image to use."
                      }
                    },
                    "vmAdminUserName": {
                      "type": "securestring",
                      "minLength": 1,
                      "metadata": {
                        "description": "The username to use for the local admin."
                      }
                    },
                    "vmAdminPwd": {
                      "type": "securestring",
                      "minLength": 1,
                      "metadata": {
                        "description": "The password to use for the local admin."
                      }
                    },
                    "vnetResourceGroupName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The resource group that the Virtual Network is located in."
                      }
                    },
                    "vnetName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name of the Virtual Network."
                      }
                    },
                    "vnetSubnetName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name of the subnet to use in the Virtual Network."
                      }
                    },
                    "vmJoinerUserName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The username of the user to use to join the session host to AD."
                      }
                    },
                    "vmJoinerPwd": {
                      "type": "securestring",
                      "minLength": 1,
                      "metadata": {
                        "description": "The password of the user joining the session host to AD."
                      }
                    },
                    "vmDomainName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The AD domain name the VM will be joining to."
                      }
                    },
                    "vmDomainOUPath": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The OU path in AD to join the VM to."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}_nic', parameters('vmName'))]",
                      "location": "[parameters('vmLocation')]",
                      "properties": {
                        "enableAcceleratedNetworking": true,
                        "ipConfigurations": [
                          {
                            "name": "ipconfig-primary",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "primary": true,
                              "subnet": {
                                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('vnetSubnetName'))]"
                              }
                            }
                          }
                        ]
                      },
                      "tags": {
                        "VirtualMachine": "[parameters('vmName')]"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-11-01",
                      "name": "[parameters('vmName')]",
                      "location": "[parameters('vmLocation')]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('vmName')]",
                          "adminUsername": "[parameters('vmAdminUserName')]",
                          "adminPassword": "[parameters('vmAdminPwd')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true
                          }
                        },
                        "securityProfile": "[if(equals(parameters('vmTrustedLaunch'), true()), createObject('securityType', 'TrustedLaunch', 'uefiSettings', createObject('secureBootEnabled', true(), 'vTpmEnabled', true())), null())]",
                        "licenseType": "Windows_Client",
                        "storageProfile": {
                          "osDisk": {
                            "createOption": "FromImage",
                            "osType": "Windows",
                            "name": "[format('{0}_OSDisk', parameters('vmName'))]",
                            "diskSizeGB": "[parameters('vmDiskSizeGB')]",
                            "managedDisk": {
                              "storageAccountType": "Premium_LRS"
                            }
                          },
                          "imageReference": {
                            "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('imageGalleryResourceGroupName')), 'Microsoft.Compute/galleries/images/versions', parameters('imageGalleryName'), parameters('imageName'), parameters('imageVersion'))]"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}_nic', parameters('vmName')))]"
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        }
                      },
                      "tags": {
                        "VirtualMachine": "[parameters('vmName')]",
                        "ImageName": "[parameters('imageName')]",
                        "ImageVersion": "[parameters('imageVersion')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}_nic', parameters('vmName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'joinDomain')]",
                      "location": "[parameters('vmLocation')]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "settings": {
                          "name": "[parameters('vmDomainName')]",
                          "ouPath": "[parameters('vmDomainOUPath')]",
                          "user": "[parameters('vmJoinerUserName')]",
                          "restart": true,
                          "options": "3"
                        },
                        "protectedSettings": {
                          "password": "[parameters('vmJoinerPwd')]"
                        }
                      },
                      "tags": {
                        "VirtualMachine": "[parameters('vmName')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[equals(parameters('vmInstallGPUDriver'), true())]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'gpuExtension')]",
                      "location": "[parameters('vmLocation')]",
                      "properties": {
                        "publisher": "Microsoft.HpcCompute",
                        "type": "NvidiaGpuDriverWindows",
                        "typeHandlerVersion": "1.4",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'joinDomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "nic": {
                      "type": "object",
                      "value": {
                        "resourceId": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}_nic', parameters('vmName')))]",
                        "name": "[format('{0}_nic', parameters('vmName'))]"
                      }
                    },
                    "vm": {
                      "type": "object",
                      "value": {
                        "resourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                        "name": "[parameters('vmName')]"
                      }
                    },
                    "vmOsDisk": {
                      "type": "object",
                      "value": {
                        "resourceId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-11-01').storageProfile.osDisk.managedDisk.id]",
                        "name": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-11-01').storageProfile.osDisk.name]"
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deployAVDHost_{0}_addMonitoring', variables('vmName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vmName": {
                    "value": "[variables('vmName')]"
                  },
                  "location": {
                    "value": "[parameters('vmLocation')]"
                  },
                  "monitoringWorkspaceSubscriptionId": {
                    "value": "[parameters('monitoringWorkspaceSubscriptionId')]"
                  },
                  "monitoringWorkspaceResourceGroupName": {
                    "value": "[parameters('monitoringWorkspaceResourceGroupName')]"
                  },
                  "monitoringWorkspaceName": {
                    "value": "[parameters('monitoringWorkspaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.14.6.61914",
                      "templateHash": "8226193344663672207"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name of the VM to add monitoring to."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "minLength": 1,
                      "metadata": {
                        "description": "The Azure region."
                      }
                    },
                    "monitoringWorkspaceSubscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "minLength": 1,
                      "metadata": {
                        "description": "The subscription ID that the log analytics workspace in located in."
                      }
                    },
                    "monitoringWorkspaceResourceGroupName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The resource group that the log analytics workspace is located in."
                      }
                    },
                    "monitoringWorkspaceName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name of the log analytics workspace."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'Microsoft.EnterpriseCloud.Monitoring')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "MicrosoftMonitoringAgent",
                        "autoUpgradeMinorVersion": true,
                        "typeHandlerVersion": "1.0",
                        "suppressFailures": true,
                        "settings": {
                          "workspaceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('monitoringWorkspaceSubscriptionId'), parameters('monitoringWorkspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('monitoringWorkspaceName')), '2022-10-01').customerId]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('monitoringWorkspaceSubscriptionId'), parameters('monitoringWorkspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('monitoringWorkspaceName')), '2022-10-01').primarySharedKey]"
                        }
                      },
                      "tags": {
                        "VirtualMachine": "[parameters('vmName')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('deployAVDHost_{0}', variables('vmName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deployAVD_{0}_finalizeSessionHost', variables('vmName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vmName": {
                    "value": "[variables('vmName')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "vmDomainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "deploymentScriptIdentityResourceGroupName": {
                    "value": "[parameters('deploymentScriptIdentityResourceGroupName')]"
                  },
                  "deploymentScriptIdentityName": {
                    "value": "[parameters('deploymentScriptIdentityName')]"
                  },
                  "location": {
                    "value": "[parameters('vmLocation')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.14.6.61914",
                      "templateHash": "2842537090841847395"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name for the VM."
                      }
                    },
                    "hostPoolName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name of the hostpool the session host will be apart of."
                      }
                    },
                    "vmDomainName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The AD domain name the VM will be joining to."
                      }
                    },
                    "deploymentScriptIdentityResourceGroupName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The resource group that the managed identity, for deployment scripts, is located in."
                      }
                    },
                    "deploymentScriptIdentityName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name of the managed identity for running deployment scripts."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "minLength": 1,
                      "metadata": {
                        "description": "The datacenter location the resources will reside."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "[CmdletBinding()]\r\nparam(\r\n    [Parameter(Position = 0, Mandatory = $true)]\r\n    [string]$VmResourceId,\r\n    [Parameter(Position = 1, Mandatory = $true)]\r\n    [string]$HostPoolName,\r\n    [Parameter(Position = 2, Mandatory = $true)]\r\n    [string]$DomainName\r\n)\r\n\r\n$writeInfoSplat = @{\r\n    \"InformationAction\" = \"Continue\";\r\n}\r\n\r\nConnect-AzAccount -Identity -Tenant \"16cc8ad9-84fe-481d-b9b0-48e7758c41aa\" -Subscription \"f01b1a05-dca3-4a19-9132-f1d18d758182\"\r\n\r\n$vmObj = Get-AzResource -ResourceId $VmResourceId | Get-AzVM\r\n\r\n$sessionHostFound = $false\r\nwhile ($sessionHostFound -eq $false) {\r\n    try {\r\n        Get-AzWvdSessionHost -ResourceGroupName $vmObj.ResourceGroupName -HostPoolName $HostPoolName -Name \"$($vmObj.Name).$($DomainName)\" -ErrorAction \"Stop\"\r\n        $sessionHostFound = $true\r\n    }\r\n    catch {\r\n        Write-Warning \"Session host not registered yet.\"\r\n        Start-Sleep -Seconds 30\r\n    }\r\n}\r\n\r\nWrite-Information @writeInfoSplat -MessageData \"Setting session host to drain mode.\"\r\n$null = Update-AzWvdSessionHost -ResourceGroupName $vmObj.ResourceGroupName -HostPoolName $HostPoolName -Name \"$($vmObj.Name).$($DomainName)\" -AllowNewSession:$false\r\n\r\nWrite-Information @writeInfoSplat -MessageData \"Waiting for session host to switch to drain mode.\"\r\nStart-Sleep -Seconds 30\r\n$sessionHostStatusIsAvailable = $false\r\n$sessionHostStatusIsValid = $true\r\n$sessionHostUnavailableCounter = 0\r\nwhile ($sessionHostStatusIsAvailable -eq $false) {\r\n    $sessionHostStatus = Get-AzWvdSessionHost -ResourceGroupName $vmObj.ResourceGroupName -HostPoolName $HostPoolName -Name \"$($vmObj.Name).$($DomainName)\"\r\n\r\n    switch ($sessionHostStatus.Status) {\r\n        \"Available\" {\r\n            Write-Information @writeInfoSplat -MessageData \"Session host status is available.\"\r\n            $sessionHostStatusIsAvailable = $true\r\n            break\r\n        }\r\n\r\n        \"Upgrading\" {\r\n            Write-Warning \"Session host is still in the upgrading status.\"\r\n            $sessionHostStatusIsAvailable = $false\r\n            break\r\n        }\r\n\r\n        \"Unavailable\" {\r\n            $sessionHostUnavailableCounter++\r\n\r\n            if ($sessionHostUnavailableCounter -gt 10) {\r\n                Write-Warning \"Session host is still showing as unavailable.\"\r\n                $sessionHostStatusIsAvailable = $true\r\n                $sessionHostStatusIsValid = $false\r\n            }\r\n            else {\r\n                Write-Warning \"Session host is showing as unavailable. Wait counter is at $($sessionHostUnavailableCounter).\"\r\n            }\r\n            break\r\n        }\r\n\r\n        Default {\r\n            Write-Warning \"Session host has a status that was not expected.\"\r\n            $sessionHostStatusIsAvailable = $true\r\n            $sessionHostStatusIsValid = $false\r\n            break\r\n        }\r\n    }\r\n\r\n    Start-Sleep -Seconds 15\r\n}\r\n\r\nif ($sessionHostStatusIsValid -eq $true) {\r\n    Write-Information @writeInfoSplat -MessageData \"Restarting VM.\"\r\n    $null = $vmObj | Restart-AzVM -NoWait -Verbose:$false\r\n}\r\nelse {\r\n    Write-Warning \"VM was not rebooted due to an invalid status returned by the session host.\"\r\n}"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('FinalizeSessionHost-{0}', parameters('vmName'))]",
                      "kind": "AzurePowerShell",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('deploymentScriptIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('deploymentScriptIdentityName')))]": {}
                        }
                      },
                      "properties": {
                        "azPowerShellVersion": "7.5",
                        "scriptContent": "[variables('$fxv#0')]",
                        "arguments": "[format('-VmResourceId \\\"{0}\\\" -HostPoolName \\\"{1}\\\" -DomainName \\\"{2}\\\"', resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), parameters('hostPoolName'), parameters('vmDomainName'))]",
                        "timeout": "PT2H",
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "PT1H"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('deployAVDHost_{0}_addMonitoring', variables('vmName')))]",
                "[resourceId('Microsoft.Resources/deployments', format('deployAVDHost_{0}', variables('vmName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deployAVD_{0}_addToHostPool', variables('vmName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vmName": {
                    "value": "[variables('vmName')]"
                  },
                  "location": {
                    "value": "[parameters('vmLocation')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "deploymentScriptIdentityResourceGroupName": {
                    "value": "[parameters('deploymentScriptIdentityResourceGroupName')]"
                  },
                  "deploymentScriptIdentityName": {
                    "value": "[parameters('deploymentScriptIdentityName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.14.6.61914",
                      "templateHash": "7522769247026148965"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the VM."
                      }
                    },
                    "hostPoolName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name of the AVD hostpool to add the VM to."
                      }
                    },
                    "deploymentScriptIdentityResourceGroupName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The resource group that the managed identity, for deployment scripts, is located in."
                      }
                    },
                    "deploymentScriptIdentityName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "The name of the managed identity for running deployment scripts."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "minLength": 1,
                      "metadata": {
                        "description": "The Azure region."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "[CmdletBinding()]\r\nparam(\r\n    [Parameter(Position = 0, Mandatory)]\r\n    [string]$ResourceGroupName,\r\n    [Parameter(Position = 1, Mandatory)]\r\n    [string]$HostPoolName\r\n)\r\n\r\nConnect-AzAccount -Identity -Tenant \"16cc8ad9-84fe-481d-b9b0-48e7758c41aa\" -Subscription \"f01b1a05-dca3-4a19-9132-f1d18d758182\"\r\n\r\n$expirationDateTime = [datetime]::Now.AddHours(6)\r\n$expirationDateTimeString = $expirationDateTime.ToUniversalTime().ToString(\"yyyy-MM-ddTHH:mm:ss.fffffffZ\")\r\n\r\n$regToken = New-AzWvdRegistrationInfo -ResourceGroupName $ResourceGroupName -HostPoolName $HostPoolName -ExpirationTime $expirationDateTimeString\r\n\r\n$DeploymentScriptOutputs = @{}\r\n$DeploymentScriptOutputs['regToken'] = $regToken.Token",
                    "$fxv#1": "[CmdletBinding(SupportsShouldProcess)]\nparam(\n    [Parameter(Position = 0, Mandatory)]\n    [string]$RegistrationToken\n)\n\n<#\n        Notes about this script:\n\n        **This script is meant to be passed to a Windows 10/Server VM in Azure with the 'Invoke-AzVMRunCommand' cmdlet.**\n\n        It will take advantage of PowerShell 7. The 'RunPowerShellScript' extension of the Azure VM agent will default to Windows PowerShell 5.1.\n        I personally write all of my scripts to work with PowerShell 7 because of the features it brings that PS 5.1 can't do.\n        The script will be ran through the PS 5.1 process, but will launch multiple PS 7 processes to execute the primary portions of this script.\n\n        This is easily achievable because 'pwsh.exe' will take a script block in the '-Command' argument.\n        Since the PS 5.1 process recognizes the 'ScriptBlock' type, we can pass the core logic to it without having to backport to PS 5.1.\n        For more information, see this section in the help docs:\n        https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pwsh?view=powershell-7.1#-command---c\n\n        To also make it so that a registration token isn't hardcoded into the script...\n        This script will dynamically update the script block with the supplied registration token.\n        #>\n\n# Install the 'PSDesiredStateConfiguration' module.\npwsh.exe -Command { Install-Module -Name \"PSDesiredStateConfiguration\" -MaximumVersion \"2.99\" -Scope \"AllUsers\" -Force -Verbose }\n\n# Install the 'xPSDesiredStateConfiguration' module in the global modules directory for PowerShell 7.\npwsh.exe -Command { Install-Module -Name \"xPSDesiredStateConfiguration\" -Scope \"AllUsers\" -Force -Verbose }\n\n# Enable the ability for PowerShell 7 to utilize the 'Invoke-DscResource' cmdlet.\npwsh.exe -Command { Enable-ExperimentalFeature -Name \"PSDesiredStateConfiguration.InvokeDscResource\" -Scope \"AllUsers\" }\n\n# This script block is the actual script to run.\n$agentInstallScriptBlock = {\n    # 'Invoke-AvdAgentInstall' downloads and installs both the AVD Agent and Agent Bootloader.\n    function Invoke-AvdAgentInstall {\n        [CmdletBinding(SupportsShouldProcess)]\n        param(\n            [Parameter(Position = 0, Mandatory)]\n            [string]$RegistrationToken\n        )\n\n        <#\n        .CLASS AvdAgentFile\n        Houses information about the agent install file.\n\n        .PROPERTY DisplayName\n        A friendly name for the file.\n\n        .PROPERTY FileUri\n        The URI for downloading the file.\n\n        .PROPERTY DownloadedFileInfo\n        The file info of the downloaded file.\n        #>\n        class AvdAgentFile {\n            [string]$DisplayName\n            [string]$FileName\n            [string]$FileUri\n            [System.IO.FileInfo]$DownloadedFileInfo\n\n            AvdAgentFile() {\n\n            }\n\n            AvdAgentFile([string]$name, [string]$uri) {\n                $this.DisplayName = $name\n                $this.FileUri = $uri\n            }\n\n            AvdAgentFile([string]$name, [string]$uri, [string]$fileNameOut) {\n                $this.DisplayName = $name\n                $this.FileUri = $uri\n                $this.FileName = $fileNameOut\n            }\n        }\n\n        <#\n        .SYNOPSIS\n        Download a file from the internet.\n        \n        .DESCRIPTION\n        A simple file downloader that downloads a file to a directory without manually specifying the file's ouput name.\n        \n        .PARAMETER Uri\n        The URI of the resource to download.\n        \n        .PARAMETER OutDir\n        The output directory for the file to be downloaded to.\n        #>\n        function Invoke-WebDownload {\n            [CmdletBinding()]\n            param(\n                [Parameter(Position = 0, Mandatory)]\n                [ValidateNotNullOrEmpty()]\n                [string]$Uri,\n                [Parameter(Position = 1, Mandatory)]\n                [ValidateNotNullOrEmpty()]\n                [string]$OutDir,\n                [Parameter(Position = 2, Mandatory)]\n                [string]$OutFileName\n            )\n\n            # Resolve the path supplied in '-OutDir' and ensure that it's a directory.\n            $resolvedOutDir = (Resolve-Path -Path $OutDir -ErrorAction \"Stop\").Path\n            $outDirObj = Get-Item -Path $resolvedOutDir\n            if ($outDirObj.Attributes -ne [System.IO.FileAttributes]::Directory) {\n                $PSCmdlet.ThrowTerminatingError(\n                    [System.Management.Automation.ErrorRecord]::new(\n                        [System.Exception]::new(\"Output directory path is not a directory.\"),\n                        \"OutputIsNotDir\",\n                        [System.Management.Automation.ErrorCategory]::InvalidType,\n                        $outDirObj\n                    )\n                )\n            }\n\n            # Run 'Invoke-WebRequest' to download the file.\n            # The '$ProgressPreference' variable is set to 'SilentlyContinue' temporarily to prevent the performance drawbacks of it.\n            Write-Verbose \"Downloading file from '$($Uri)'.\"\n            $ProgressPreference = \"SilentlyContinue\"\n            $downloadData = Invoke-WebRequest -Uri $Uri\n            $ProgressPreference = \"Continue\"\n\n            # Generate the output path.\n            $outputFilePath = Join-Path -Path $resolvedOutDir -ChildPath $OutFileName\n            Write-Verbose \"Output path will be '$($outputFilePath)'.\"\n\n            # If the file already exists, remove it.\n            if (Test-Path -Path $outputFilePath) {\n                Write-Verbose \"File aready exists. Removing the current file.\"\n                Remove-Item -Path $outputFilePath -Force\n            }\n\n            # Write the file to the output path.\n            Write-Verbose \"Writing contents to file.\"\n            $writtenFileStream = [System.IO.File]::Create($outputFilePath)\n            $writtenFileStream.Write($downloadData.Content)\n            $writtenFileStream.Dispose()\n\n            # Return the 'System.IO.FileInfo' object of the downloaded file.\n            $downloadedItem = Get-Item -Path $outputFilePath\n            return $downloadedItem\n        }\n\n        <#\n        .SYNOPSIS\n        Get the MSI product code of a MSI installer.\n        \n        .DESCRIPTION\n        Get the MSI product code of a MSI installer without utilizing Orca or any other manual retrieval method.\n        \n        .PARAMETER FilePath\n        The path to the MSI installer.\n        #>\n        function Get-MsiProductCode {\n            [CmdletBinding()]\n            param(\n                [Parameter(Position = 0, Mandatory)]\n                [ValidateNotNullOrEmpty()]\n                [string]$FilePath\n            )\n\n            # Resolve the path provided in '-FilePath'.\n            $filePathResolved = (Resolve-Path -Path $FilePath -ErrorAction \"Stop\").Path\n\n            # Create a list to store all of the COM objects into.\n            # This will help with disposing them at the end of execution.\n            $comObjectList = [System.Collections.Generic.List[System.Object]]::new()\n\n            # Assign the COM object for 'WindowsInstaller.Installer' to a variable and open the database of the provided MSI installer.\n            $comObjectList.Add(($msiComObj = New-Object -ComObject \"WindowsInstaller.Installer\"))\n            $comObjectList.Add(($msiObj = $msiComObj.GetType().InvokeMember(\"OpenDatabase\", \"InvokeMethod\", $null, $msiComObj, @($filePathResolved, 0))))\n\n            # Run a query on the MSI installer to get the product code.\n            $comObjectList.Add(($msiView = $msiObj.GetType().InvokeMember(\"OpenView\", \"InvokeMethod\", $null, $msiObj, \"SELECT Value FROM Property WHERE Property = 'ProductCode'\")))\n            $msiView.GetType().InvokeMember(\"Execute\", \"InvokeMethod\", $null, $msiView, $null)\n\n            # Get the product code and return it as a string.\n            $comObjectList.Add(($msiRecord = $msiView.GetType().InvokeMember(\"Fetch\", \"InvokeMethod\", $null, $msiView, $null)))\n            $msiProductCode = $msiRecord.GetType().InvokeMember(\"StringData\", \"GetProperty\", $null, $msiRecord, 1)\n\n            # Release all of the COM objects created during execution.\n            foreach ($comObj in $comObjectList) {\n                $null = [System.Runtime.InteropServices.Marshal]::ReleaseComObject($comObj)\n            }\n\n            return [string]($msiProductCode)\n        }\n\n        Import-Module -Name \"PSDesiredStateConfiguration\"\n        Import-Module -Name \"xPSDesiredStateConfiguration\"\n\n        # Initialize an array of the AVD agents to get.\n        $avdAgentFilesToGet = @(\n            [AvdAgentFile]::new(\"AVD Desktop Agent\", \"https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RWrmXv\", \"avd-agent.msi\"),\n            [AvdAgentFile]::new(\"AVD Desktop Agent Bootloader\", \"https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RWrxrH\", \"avd-bootloader.msi\")\n        )\n\n        # Create a temporary directory at the root of the system drive (Typically C:\\) to store the agent installers.\n        $tmpDirPath = Join-Path -Path \"$($env:SystemDrive)\\\" -ChildPath \"AvdAgentInstall\"\n        Remove-Item -Path $tmpDirPath -Force -Recurse -ErrorAction \"SilentlyContinue\"\n        $tmpDir = New-Item -Path $tmpDirPath -ItemType \"Directory\"\n\n        # Download each AVD agent installer.\n        foreach ($avdAgent in $avdAgentFilesToGet) {\n            Write-Verbose \"Downloading '$($avdAgent.DisplayName)''.\"\n\n            $downloadFileSplat = @{\n                \"Uri\"         = $avdAgent.FileUri;\n                \"OutDir\"      = $tmpDir.FullName;\n                \"OutFileName\" = $avdAgent.FileName;\n            }\n\n            $downloadedFile = Invoke-WebDownload @downloadFileSplat\n\n            # Set the 'DownloadedFileInfo' property of the item to the downloaded file's 'System.IO.FileInfo' object.\n            $avdAgent.DownloadedFileInfo = $downloadedFile\n        }\n\n        # Initialize a generic splat to use with 'Invoke-DscResource'.\n        $msiDscMainSplat = @{\n            \"ModuleName\" = \"xPSDesiredStateConfiguration\";\n            \"Name\"       = \"xMsiPackage\";\n        }\n\n        # AVD agent\n        Write-Verbose \"Ensuring that the desktop agent is installed.\"\n        $productCodeForAgent = Get-MsiProductCode -FilePath $avdAgentFilesToGet[0].DownloadedFileInfo.FullName\n        $msiInstallAgentDsc = @{\n            \"Path\"         = $avdAgentFilesToGet[0].DownloadedFileInfo.FullName;\n            \"Ensure\"       = \"Present\";\n            \"ProductId\"    = \"$($productCodeForAgent)\";\n            \"Arguments\"    = \"REGISTRATIONTOKEN=$($RegistrationToken)\";\n            \"IgnoreReboot\" = $true;\n        }\n\n        # Test if the AVD agent is already installed.\n        # If not, install the AVD agent.\n        $agentTest = Invoke-DscResource @msiDscMainSplat -Method \"Test\" -Property $msiInstallAgentDsc\n        if ($agentTest.InDesiredState -eq $false) {\n            if ($PSCmdlet.ShouldProcess(\"$($avdAgentFilesToGet[0].DisplayName)\", \"Install\")) {\n                Invoke-DscResource @msiDscMainSplat -Method \"Set\" -Property $msiInstallAgentDsc\n            }\n        }\n\n        # AVD bootloader agent\n        Write-Verbose \"Ensuring that the desktop agent bootloader is installed.\"\n        $productCodeForAgentBootloader = Get-MsiProductCode -FilePath $avdAgentFilesToGet[1].DownloadedFileInfo.FullName\n        $msiInstallAgentBootloaderDsc = @{\n            \"Path\"         = $avdAgentFilesToGet[1].DownloadedFileInfo.FullName;\n            \"Ensure\"       = \"Present\";\n            \"ProductId\"    = \"$($productCodeForAgentBootloader)\";\n            \"IgnoreReboot\" = $true;\n        }\n\n        # Test if the AVD bootloader agent is already installed.\n        # If not, install the AVD bootloader agent.\n        $agentBootloaderTest = Invoke-DscResource @msiDscMainSplat -Method \"Test\" -Property $msiInstallAgentBootloaderDsc\n        if ($agentBootloaderTest.InDesiredState -eq $false) {\n            if ($PSCmdlet.ShouldProcess(\"$($avdAgentFilesToGet[1].DisplayName)\", \"Install\")) {\n                Invoke-DscResource @msiDscMainSplat -Method \"Set\" -Property $msiInstallAgentBootloaderDsc\n            }\n        }\n\n        # Remove the temporary directory.\n        Remove-Item -Path $tmpDirPath -Force -Recurse -ErrorAction \"SilentlyContinue\"\n    }\n\n    # Run the 'Invoke-AvdAgentInstall' function.\n    Invoke-AvdAgentInstall -RegistrationToken \"{{REG_TOKEN_REPLACE}}\" -Verbose\n}\n\n# Convert the script block into a string and replace \"{{REG_TOKEN_REPLACE}}\" inside of it with the value provided by '-RegistrationToken'.\n$agentInstallScriptBlockString = $agentInstallScriptBlock.ToString()\n$agentInstallScriptBlockString = $agentInstallScriptBlockString.Replace(\"{{REG_TOKEN_REPLACE}}\", $RegistrationToken)\n\n# Create a new script block with the updated data.\n$updatedAgentInstallScriptBlock = [System.Management.Automation.ScriptBlock]::Create($agentInstallScriptBlockString)\n\n# Run the script block with PowerShell 7.\npwsh.exe -NoProfile -Command $updatedAgentInstallScriptBlock"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('Get-HostPoolRegInfo-{0}', uniqueString(resourceGroup().id))]",
                      "kind": "AzurePowerShell",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('deploymentScriptIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('deploymentScriptIdentityName')))]": {}
                        }
                      },
                      "properties": {
                        "azPowerShellVersion": "7.5",
                        "scriptContent": "[variables('$fxv#0')]",
                        "arguments": "[format('-ResourceGroupName \\\"{0}\\\" -HostPoolName \\\"{1}\\\"', resourceGroup().name, parameters('hostPoolName'))]",
                        "timeout": "PT30M",
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "PT6H"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'AddVmToHostpool')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "source": {
                          "script": "[variables('$fxv#1')]"
                        },
                        "timeoutInSeconds": 1800,
                        "asyncExecution": true,
                        "parameters": [
                          {
                            "name": "RegistrationToken",
                            "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('Get-HostPoolRegInfo-{0}', uniqueString(resourceGroup().id))), '2020-10-01').outputs.regToken]"
                          }
                        ]
                      },
                      "tags": {
                        "VirtualMachine": "[parameters('vmName')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deploymentScripts', format('Get-HostPoolRegInfo-{0}', uniqueString(resourceGroup().id)))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('deployAVDHost_{0}_addMonitoring', variables('vmName')))]",
                "[resourceId('Microsoft.Resources/deployments', format('deployAVDHost_{0}', variables('vmName')))]"
              ]
            }
          ],
          "outputs": {
            "vmResourceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('deployAVDHost_{0}', variables('vmName'))), '2020-10-01').outputs.vm.value.resourceId]"
            },
            "vmOsDiskResourceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('deployAVDHost_{0}', variables('vmName'))), '2020-10-01').outputs.vmOsDisk.value.resourceId]"
            },
            "vmNicResourceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('deployAVDHost_{0}', variables('vmName'))), '2020-10-01').outputs.nic.value.resourceId]"
            }
          }
        }
      }
    }
  ]
}